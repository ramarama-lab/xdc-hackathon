
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "771c836b-7042-4e66-aef9-aef034426583",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üéØ Embedded Wallet Created\n",
      "üîê Private Key (simulated): 0x47ba37cb8dd8ef9b626056a27b1fb349d473c68f428fd75174d747cd1cae93a7\n",
      "üì¨ Public Address: 0x20e6aAe87BE9344f5aA7831DB23fB8e50B3eb965\n",
      "üí∞ Simulated Balance: 10000 XDC\n",
      "\n",
      "Smart Contract: Deal DEAL001 created with milestones.\n",
      "‚è≥ Waiting for milestone: Shipment Dispatched (scheduled at 2025-05-29 15:39:33.029314)\n",
      "‚ùå Milestone 'Shipment Dispatched' verification failed. No payment triggered.\n",
      "‚è≥ Waiting for milestone: Arrived at Port (scheduled at 2025-05-29 15:39:35.029314)\n",
      "üì¶ Milestone 'Arrived at Port' verified by Oracle.\n",
      "‚úÖ Payment triggered for milestone: Arrived at Port in deal DEAL001\n",
      "‚è≥ Waiting for milestone: Customs Cleared (scheduled at 2025-05-29 15:39:37.029314)\n",
      "‚ùå Milestone 'Customs Cleared' verification failed. No payment triggered.\n",
      "‚è≥ Waiting for milestone: Final Delivery (scheduled at 2025-05-29 15:39:39.029314)\n",
      "üì¶ Milestone 'Final Delivery' verified by Oracle.\n",
      "‚úÖ Payment triggered for milestone: Final Delivery in deal DEAL001\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Import required libraries\n",
    "import time\n",
    "import random\n",
    "from datetime import datetime, timedelta\n",
    "from eth_account import Account\n",
    "import secrets\n",
    "\n",
    "# Cell 2: Simulated Smart Contract Interface\n",
    "class SmartContract:\n",
    "    def __init__(self):\n",
    "        self.payments = {}\n",
    "        \n",
    "    def create_deal(self, deal_id, milestones):\n",
    "        self.payments[deal_id] = {milestone['name']: False for milestone in milestones}\n",
    "        print(f\"Smart Contract: Deal {deal_id} created with milestones.\")\n",
    "\n",
    "    def trigger_payment(self, deal_id, milestone_name):\n",
    "        if not self.payments[deal_id][milestone_name]:\n",
    "            self.payments[deal_id][milestone_name] = True\n",
    "            print(f\"‚úÖ Payment triggered for milestone: {milestone_name} in deal {deal_id}\")\n",
    "        else:\n",
    "            print(f\"‚ö†Ô∏è Payment already completed for {milestone_name}\")\n",
    "\n",
    "# Cell 3: Oracle Simulation\n",
    "class Oracle:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def verify_delivery(self, milestone_name):\n",
    "        return random.random() > 0.2  # 80% chance of delivery success\n",
    "\n",
    "# Cell 4: Embedded Wallet (Simulated)\n",
    "class EmbeddedWallet:\n",
    "    def __init__(self):\n",
    "        self.private_key = \"0x\" + secrets.token_hex(32)\n",
    "        acct = Account.from_key(self.private_key)\n",
    "        self.public_address = acct.address\n",
    "        self.balance = 10000  # Simulated balance in XDC\n",
    "        print(\"üéØ Embedded Wallet Created\")\n",
    "        print(f\"üîê Private Key (simulated): {self.private_key}\")\n",
    "        print(f\"üì¨ Public Address: {self.public_address}\")\n",
    "        print(f\"üí∞ Simulated Balance: {self.balance} XDC\\n\")\n",
    "\n",
    "# Cell 5: Payment Scheduler Agent\n",
    "class PaymentSchedulerAgent:\n",
    "    def __init__(self, deal_id, milestones, smart_contract, oracle, wallet):\n",
    "        self.deal_id = deal_id\n",
    "        self.milestones = milestones\n",
    "        self.smart_contract = smart_contract\n",
    "        self.oracle = oracle\n",
    "        self.wallet = wallet\n",
    "        self.current_time = datetime.now()\n",
    "\n",
    "        self.smart_contract.create_deal(deal_id, milestones)\n",
    "\n",
    "    def run(self):\n",
    "        for milestone in self.milestones:\n",
    "            milestone_time = self.current_time + timedelta(seconds=milestone['delay'])\n",
    "            print(f\"‚è≥ Waiting for milestone: {milestone['name']} (scheduled at {milestone_time})\")\n",
    "            while datetime.now() < milestone_time:\n",
    "                time.sleep(1)\n",
    "\n",
    "            verified = self.oracle.verify_delivery(milestone['name'])\n",
    "            if verified:\n",
    "                print(f\"üì¶ Milestone '{milestone['name']}' verified by Oracle.\")\n",
    "                self.smart_contract.trigger_payment(self.deal_id, milestone['name'])\n",
    "            else:\n",
    "                print(f\"‚ùå Milestone '{milestone['name']}' verification failed. No payment triggered.\")\n",
    "\n",
    "# Cell 6: Define Milestones\n",
    "milestones = [\n",
    "    {\"name\": \"Shipment Dispatched\", \"delay\": 2},\n",
    "    {\"name\": \"Arrived at Port\", \"delay\": 4},\n",
    "    {\"name\": \"Customs Cleared\", \"delay\": 6},\n",
    "    {\"name\": \"Final Delivery\", \"delay\": 8}\n",
    "]\n",
    "\n",
    "# Cell 7: Initialize and Run the Agent\n",
    "wallet = EmbeddedWallet()\n",
    "smart_contract = SmartContract()\n",
    "oracle = Oracle()\n",
    "agent = PaymentSchedulerAgent(\"DEAL001\", milestones, smart_contract, oracle, wallet)\n",
    "agent.run()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ea1ed645-a624-4b82-8790-89d23db4cbb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (3.9.4)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (1.3.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (4.56.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (1.4.7)\n",
      "Requirement already satisfied: numpy>=1.23 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (2.0.2)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (3.2.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: importlib-resources>=3.2.0 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib) (6.5.2)\n",
      "Requirement already satisfied: zipp>=3.1.0 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from importlib-resources>=3.2.0->matplotlib) (3.21.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\raj45\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 25.0.1 -> 25.1.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cdf24e80-cdf7-4541-9cb1-d759c5b59205",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\raj45\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 128230 (\\N{PACKAGE}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cell 8: Milestone Payment Status Chart\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract milestone names and status\n",
    "milestone_names = [m[\"name\"] for m in milestones]\n",
    "statuses = [smart_contract.payments[\"DEAL001\"][name] for name in milestone_names]\n",
    "\n",
    "# Convert boolean status to strings\n",
    "status_labels = [\"Paid\" if s else \"Pending\" for s in statuses]\n",
    "colors = [\"green\" if s else \"gray\" for s in statuses]\n",
    "\n",
    "# Plot bar chart\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.bar(milestone_names, [1]*len(milestone_names), color=colors)\n",
    "plt.xticks(rotation=45)\n",
    "plt.yticks([])\n",
    "for i, label in enumerate(status_labels):\n",
    "    plt.text(i, 1.02, label, ha='center', fontsize=10)\n",
    "plt.title(\"üì¶ Milestone Payment Progress\")\n",
    "plt.xlabel(\"Milestones\")\n",
    "plt.ylabel(\"\")\n",
    "plt.ylim(0, 1.2)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32d80349-1e4a-4053-8d83-b5c54e26c648",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
